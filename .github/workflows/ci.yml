name: Mis Eventos CI

on:
  push:
    paths:
      - .github/workflows/ci.yml
      - src/**
      - test/**
  workflow_dispatch:

jobs:
  tests:
    runs-on: ubuntu-latest

    # These are for testing purposes only.
    env:
        POSTGRES_HOST: localhost
        POSTGRES_PORT: 5432
        POSTGRES_DB: mis-eventos-db
        POSTGRES_USER: mis-eventos-db
        POSTGRES_PASSWORD: c2614c1673ab56aaa9ab22c23e80f8dc

    services:
      postgres-db:
        image: postgres:16
        env:
          POSTGRES_PORT: ${{ env.POSTGRES_PORT }}
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Clone repo
        uses: actions/checkout@v4

      - name: Set up Python
        id: setup-python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          virtualenvs-path: .venv
          installer-parallel: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-root --no-interaction --no-ansi --with=dev

      - name: Run tests
        run: poetry run pytest --cov=src --cov-report=term-missing --cov-report=xml

      - name: Coveralls
        uses: coverallsapp/github-action@v2
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}

  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Clone repo
        uses: actions/checkout@v4

      - name: Set up Python
        id: setup-python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          virtualenvs-path: .venv
          installer-parallel: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-root --no-interaction --no-ansi --with=dev

      - name: Run Ruff linter for code linting
        run: poetry run ruff check --output-format=github .

      - name: Run Ruff formatter
        run: poetry run ruff format --check .

      - name: Run MyPy for type checking
        run: poetry run mypy --strict .
